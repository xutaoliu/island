"""
Django settings for island project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import datetime
from django.core.exceptions import ImproperlyConfigured


def get_env(env):
    try:
        return os.environ[env]
    except KeyError:
        error_msg = f'Set the {env} environment variable.'
        raise ImproperlyConfigured(error_msg)


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env('DJ_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(get_env('DJ_DEBUG')))

ALLOWED_HOSTS = get_env('DJ_ALLOWED_HOSTS').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_jwt',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'island.middlewares.TimezoneMiddleware'
]

ROOT_URLCONF = 'island.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'island.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': get_env('DJ_DB_NAME'),
        'USER': get_env('DJ_DB_USER'),
        'PASSWORD': get_env('DJ_DB_PASSWORD'),
        'HOST': 'mysql',
        'PORT': '3306'
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = False

USE_L10N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer'
    ] + ([
            'rest_framework.renderers.BrowsableAPIRenderer'
        ] if DEBUG else []),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissions',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication'
    ] + ([
            'rest_framework.authentication.SessionAuthentication'
        ] if DEBUG else []),
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter'
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
    ] if not DEBUG else [],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '3/minute'
    },
    'EXCEPTION_HANDLER': 'island.exceptions.island_exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=int(get_env('DJ_JWT_EXPIRATION_DELTA'))),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=int(get_env('DJ_JWT_REFRESH_EXPIRATION_DELTA'))),
}

PROXY_HOST = get_env('DJ_PROXY_HOST')
PROXY_PORT = int(get_env('DJ_PROXY_PORT'))
PROXY_TYPE = get_env('DJ_PROXY_TYPE')


def log_add_ip_attribute(record):
    if hasattr(record, 'request') and hasattr(record.request, 'META'):
        if 'HTTP_X_FORWARDED_FOR' in record.request.META:
            record.addr = record.request.META['HTTP_X_FORWARDED_FOR']
        else:
            record.addr = record.request.META.get('REMOTE_ADDR', 'UNKNOWN SOURCE')
        record.addr = f'[{record.addr}]'
    else:
        record.addr = ''
    return True


LOGGING_DIR = os.path.join(BASE_DIR, 'log')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(levelname)s][%(asctime)s %(name)s %(filename)s:%(lineno)d]%(addr)s %(message)s'
        },
        'simple': {
            'format': '[%(levelname)s][%(asctime)s] %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'log_add_ip_attribute': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': log_add_ip_attribute,
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'DEBUG',
            'filters': ['log_add_ip_attribute'],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'django.log'),
            'when': 'midnight',
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file', 'mail_admins'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
        'twitter_image': {
            'handlers': ['console', 'file', 'mail_admins'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
        'wechat': {
            'handlers': ['console', 'file', 'mail_admins'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
        'flights': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
    }
}

WECHAT_TOKEN = get_env('DJ_WECHAT_TOKEN')
WECHAT_AES_KEY = get_env('DJ_WECHAT_AES_KEY')
WECHAT_APPID = get_env('DJ_WECHAT_APPID')
WECHAT_STATE_TIMEOUT = int(get_env('DJ_WECHAT_STATE_TIMEOUT'))

EMAIL_HOST = get_env('DJ_EMAIL_HOST')
EMAIL_PORT = int(get_env('DJ_EMAIL_PORT'))
EMAIL_HOST_USER = get_env('DJ_EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = get_env('DJ_EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL = bool(int(get_env('DJ_EMAIL_USE_SSL')))
EMAIL_USE_TLS = bool(int(get_env('DJ_EMAIL_USE_TLS')))

RABBITMQ_DEFAULT_USER = get_env('DJ_RABBITMQ_DEFAULT_USER')
RABBITMQ_DEFAULT_PASS = get_env('DJ_RABBITMQ_DEFAULT_PASS')

CELERY_BROKER_URL = f'amqp://{RABBITMQ_DEFAULT_USER}:{RABBITMQ_DEFAULT_PASS}@rabbitmq:5672'
